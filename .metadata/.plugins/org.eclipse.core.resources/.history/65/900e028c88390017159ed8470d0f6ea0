package affichage;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JButton;
import javax.swing.JPanel;

import projet.Monochro;
import projet.Single;

public class Bouton extends JPanel implements Observer {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	Monochro mono;
	JButton tm = new JButton("alea");

	public Bouton() {
		mono = Single.getInstance().mono;
		mono.addObserver(this);
		Single.getInstance().mono.addObserver(this);
		tm.addActionListener(new rand());
		this.add(tm);

	}

	@Override
	public void update(Observable o, Object arg) {
		mono = Single.getInstance().mono;
	}

	public class rand implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent arg0) {
			mono.remplir();
			Single.getInstance().histo(mono.valeur());
			//System.out.println(mono.valeur());
		}
	}
	
	public class voisin implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent arg0) {
			mono.remplir();
			int x = (int) (Math.random()*mono.size());
			int y = (int) (Math.random()*mono.size());
			Monochro aze = mono.aleration(x, y);
			Single.getInstance().histo(mono.valeur());
			//System.out.println(mono.valeur());
		}
	}
}
